'''
This script uses SciPy's conneced_components to cluster baesd on full-genome genetic distance < cutoff.
Output is a JSON file containing {strain : cluster} to keep Snakemake pipeline happy and for easy reading.
Clusters for each strain are also stored as a numpy array in the HDF5 file under ['samples'], in the same order as ['samples'].
'''

import argparse
import h5py
import numpy as np
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import connected_components
import json

def adjacency_matrix(file, cutoff):
    '''
    Returns an adjacency matrix on which to cluster.
    '''
    matrix = np.array(file['samples']['genome'].get('genome'), dtype='i4')
    lower_tri = np.tril(np.ones(matrix.shape), -1)
    adj_matrix = np.zeros(matrix.shape)
    adj_matrix[(matrix < cutoff) & (lower_tri == 1)] = 1
    return adj_matrix

def cluster(adj_matrix):
    '''
    Uses SciPy connected_components to cluster samples.
    '''
    graph = csr_matrix(adj_matrix)
    n_clusters, labels = connected_components(
        csgraph=graph, directed=False, return_labels=True
    )
    return np.asarray(labels)

def write_to_json(file, clusters, output):
    '''
    Writes {strain : cluster} dictionary to JSON file.
    '''
    samples = np.array(file['samples'].get('samples'))
    str_samples = np.char.decode(samples)
    clusters_list = clusters.tolist()
    clusters_dict = dict(zip(str_samples, clusters_list))
    with open(output, 'wt') as fh:
        json.dump(clusters_dict, fh, indent=1)

def write_to_h5py(file, clusters, cutoff):
    '''
    Writes residuals matrix to HDF5 file under ['samples']['clusters' + cutoff]
    '''
    group = file['samples']
    if 'clusters' + str(cutoff) in group:
        del group['clusters' + str(cutoff)]
    group.create_dataset('clusters' + str(cutoff), data=clusters)
    return file.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Cluster strains by genetic distance < cutoff',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument('--pairwise', type=str, required=True, help='HDF5 dataset generated by compare.py')
    parser.add_argument('--cutoff', type=int, required=True, help='Genomic distance cutoff on which to cluster')
    parser.add_argument('--output', type=str, required=True, help='name of clusters JSON')
    args = parser.parse_args()

    # Opens HDF5 file
    hfile = h5py.File(args.pairwise, mode='r+')

    # Create adjacency matrix
    adj_matrix = adjacency_matrix(hfile, args.cutoff)

    # Uses connected_components to cluster
    clusters = cluster(adj_matrix)

    # Writes clusters dictionary to JSON:
    write_to_json(hfile, clusters, args.output)

    # Writes to HDF5 file and closes it
    write_to_h5py(hfile, clusters, args.cutoff)
